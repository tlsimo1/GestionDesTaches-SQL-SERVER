<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DurableTask.Core</name>
    </assembly>
    <members>
        <member name="T:DurableTask.Core.Common.CompressionStyle">
            <summary>
            Compression style
            </summary>
        </member>
        <member name="F:DurableTask.Core.Common.CompressionStyle.Legacy">
            <summary>
                Revert to pre-message compression behavior (not recommended)
            </summary>
        </member>
        <member name="F:DurableTask.Core.Common.CompressionStyle.Never">
            <summary>
                Never compress messages
            </summary>
        </member>
        <member name="F:DurableTask.Core.Common.CompressionStyle.Always">
            <summary>
                Always compress messages
            </summary>
        </member>
        <member name="F:DurableTask.Core.Common.CompressionStyle.Threshold">
            <summary>
                Only compress messages if they are above the threshold
            </summary>
        </member>
        <member name="T:DurableTask.Core.Common.DateTimeUtils">
            <summary>
            Extension methods for DateTime
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.DateTimeUtils.IsSet(System.DateTime)">
            <summary>
            Returns bool indicating is the datetime has a value set
            </summary>        
        </member>
        <member name="F:DurableTask.Core.Common.DateTimeUtils.MinDateTime">
            <summary>
            Returns minimum allowable DateTime, allows overrdiing this for the storage emulator.
            The Storage emulator supports a min datetime or DateTime.FromFileTimeUtc(0)
            </summary>  
        </member>
        <member name="M:DurableTask.Core.Common.DateTimeUtils.SetMinDateTimeForStorageEmulator">
            <summary>
            Uses reflection to alter the static readonly MinDateTime value for tests
            </summary>  
        </member>
        <member name="T:DurableTask.Core.Common.Utils">
            <summary>
            Utility Methods
            </summary>
        </member>
        <member name="F:DurableTask.Core.Common.Utils.DateTimeSafeMaxValue">
            <summary>
            Gets a safe maximum datetime value that accounts for timezone
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.Truncate(System.String,System.Int32)">
            <summary>
            Extension method to truncate a string to the supplied length
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.WriteObjectToStream(System.IO.Stream,System.Object)">
            <summary>
            Serializes and appends the supplied object to the supplied stream
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.WriteStringToStream(System.String,System.Boolean,System.Int64@)">
            <summary>
            Writes the supplied string input to a MemoryStream, optionaly compressing the string, returns the stream
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.ReadObjectFromStream``1(System.IO.Stream)">
            <summary>
            Reads and deserializes an Object from the supplied stream
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.ReadBytesFromStream(System.IO.Stream)">
            <summary>
            Reads bytes from the supplied stream
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.ReadObjectFromByteArray``1(System.Byte[])">
            <summary>
            Deserializes an Object from the supplied bytes
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.IsGzipStream(System.IO.Stream)">
            <summary>
            Returns true or false whether the supplied stream is a compressed stream
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.GetCompressedStream(System.IO.Stream)">
            <summary>
                Caller disposes the returned stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.GetDecompressedStreamAsync(System.IO.Stream)">
            <summary>
                Caller disposes the returned stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.IsFatal(System.Exception)">
            <summary>
            Returns true or false whether an exception is considered fatal
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.ExecuteWithRetries(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Executes the supplied action until successful or the supplied number of attempts is reached
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.ExecuteWithRetries``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Executes the supplied action until successful or the supplied number of attempts is reached
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.SerializeCause(System.Exception,DurableTask.Core.Serializing.DataConverter)">
            <summary>
            Serializes the supplied exception to a string
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.RetrieveCause(System.String,DurableTask.Core.Serializing.DataConverter)">
            <summary>
            Retrieves the exception from a previously serialized exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.EscapeJson(System.String)">
            <summary>
            Escapes the supplied input
            </summary>
        </member>
        <member name="M:DurableTask.Core.Common.Utils.BuildOrchestrationState(DurableTask.Core.OrchestrationRuntimeState)">
            <summary>
            Builds a new OrchestrationState from the supplied OrchestrationRuntimeState
            </summary>
        </member>
        <member name="T:DurableTask.Core.DefaultObjectCreator`1">
            <summary>
            Object instance creator for a type using default name and version based on the type
            </summary>
            <typeparam name="T">Type of Object</typeparam>
        </member>
        <member name="M:DurableTask.Core.DefaultObjectCreator`1.#ctor(System.Type)">
            <summary>
            Creates a new DefaultObjectCreator of supplied type
            </summary>
            <param name="type">Type to use for the creator</param>
        </member>
        <member name="M:DurableTask.Core.DefaultObjectCreator`1.#ctor(`0)">
            <summary>
            Creates a new DefaultObjectCreator using type of supplied object instance
            </summary>
            <param name="instance">Object instances to infer the type from</param>
        </member>
        <member name="M:DurableTask.Core.DefaultObjectCreator`1.Create">
            <summary>
            Creates a new instance of the object creator's type
            </summary>
            <returns>An instance of the type T</returns>
        </member>
        <member name="T:DurableTask.Core.Exceptions.NonDeterministicOrchestrationException">
            <summary>
            Represents non deterministic created during orchestration execution
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.NonDeterministicOrchestrationException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes an new instance of the NonDeterministicOrchestrationException class with a specified eventid and error message
            </summary>
            <param name="eventId">EventId of the error.</param>
            <param name="eventDetails">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.NonDeterministicOrchestrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the NonDeterministicOrchestrationException class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DurableTask.Core.Exceptions.OrchestrationAlreadyExistsException">
            <summary>
            Represents orchestration already exists exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the OrchestrationAlreadyExistsException class with a specified error message
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the OrchestrationAlreadyExistsException class with a specified error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:DurableTask.Core.Exceptions.OrchestrationException">
            <summary>
            Represents errors created during orchestration execution
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.#ctor">
            <summary>
            Initializes an new instance of the OrchestrationException class
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the OrchestrationException class with a specified error message
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the OrchestrationException class with a specified error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes an new instance of the OrchestrationException class with a specified eventid and error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="eventId">EventId of the error.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the OrchestrationException class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:DurableTask.Core.Exceptions.OrchestrationException.EventId">
            <summary>
            Gets or sets the EventId of the exception
            </summary>
        </member>
        <member name="T:DurableTask.Core.Exceptions.OrchestrationFailureException">
            <summary>
            Exception type thrown by implementors of <see cref="T:DurableTask.Core.TaskOrchestration"/> when exception
            details need to flow to parent orchestrations.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.OrchestrationFailureException"/>.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.OrchestrationFailureException"/>.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.OrchestrationFailureException"/>.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.OrchestrationFailureException"/>.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.OrchestrationFailureException"/> class.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.OrchestrationFailureException.Details">
            <summary>
            Details of the exception which will flow to the parent orchestration.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data for use by serialization.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Exceptions.OrchestrationFrameworkException">
            <summary>
            Represents errors created by the orchestration framework
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFrameworkException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the OrchestrationFrameworkException class with a specified error message
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFrameworkException.#ctor(System.Exception)">
            <summary>
            Initializes an new instance of the OrchestrationFrameworkException class with a specified inner exception
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.OrchestrationFrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the OrchestrationFrameworkException class with a specified error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:DurableTask.Core.Exceptions.SubOrchestrationFailedException">
            <summary>
            Represents errors created during sub orchestration execution
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.#ctor">
            <summary>
            Initializes an new instance of the SubOrchestrationFailedException class
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the SubOrchestrationFailedException class with a specified error message
            </summary>
            <param name="reason">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the SubOrchestrationFailedException class with a specified error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="reason">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes an new instance of the SubOrchestrationFailedException class with a specified eventid, scheduleid, name, version and error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="eventId">EventId of the error.</param>
            <param name="scheduleId">ScheduleId of the error.</param>
            <param name="name">Name of the Type Instance that experienced the error.</param>
            <param name="version">Version of the Type Instance that experienced the error.</param>
            <param name="reason">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception, or a null reference if no cause is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SubOrchestrationFailedException class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.SubOrchestrationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:DurableTask.Core.Exceptions.SubOrchestrationFailedException.ScheduleId">
            <summary>
            Schedule Id of the exception
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.SubOrchestrationFailedException.Name">
            <summary>
            Name of the Type Instance that experienced the error
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.SubOrchestrationFailedException.Version">
            <summary>
            Version of the Type Instance that experienced the error
            </summary>
        </member>
        <member name="T:DurableTask.Core.Exceptions.TaskFailedException">
            <summary>
            Represents errors created during task execution
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.#ctor">
            <summary>
            Initializes an new instance of the TaskFailedException class
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the TaskFailedException class with a specified error message
            </summary>
            <param name="reason">The message that describes the error.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the TaskFailedException class with a specified error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="reason">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes an new instance of the TaskFailedException class with a specified eventid, scheduleid, name, version and error message
               and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="eventId">EventId of the error.</param>
            <param name="scheduleId">ScheduleId of the error.</param>
            <param name="name">Name of the Type Instance that experienced the error.</param>
            <param name="version">Version of the Type Instance that experienced the error.</param>
            <param name="reason">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception, or a null reference if no cause is specified.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the TaskFailedException class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:DurableTask.Core.Exceptions.TaskFailedException.ScheduleId">
            <summary>
            Schedule Id of the exception
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.TaskFailedException.Name">
            <summary>
            Name of the Type Instance that experienced the error
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.TaskFailedException.Version">
            <summary>
            Version of the Type Instance that experienced the error
            </summary>
        </member>
        <member name="T:DurableTask.Core.Exceptions.TaskFailedExceptionDeserializationException">
            <summary>
            Represents errors created during deserialization
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailedExceptionDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an new instance of the TaskFailedExceptionDeserializationException class with a specified error message
               and a reference to the deserialization exception that is the cause.
            </summary>
            <param name="details">The message that describes the error.</param>
            <param name="deserializationException">The deserialization exception that is the cause of the current exception.</param>
        </member>
        <member name="T:DurableTask.Core.Exceptions.TaskFailureException">
            <summary>
            Exception type thrown by implementors of <see cref="T:DurableTask.Core.TaskActivity"/> when exception
            details need to flow to parent orchestrations.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.Core.Exceptions.TaskFailureException"/> class.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data for use by serialization.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TaskFailureException.ToString">
            <summary>
            Returns a debug string representing the current exception object.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Exceptions.TaskFailureException.Details">
            <summary>
            Details of the exception which will flow to the parent orchestration.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Exceptions.TypeMissingException">
            <summary>
            Represents a type missing error
            </summary>
        </member>
        <member name="M:DurableTask.Core.Exceptions.TypeMissingException.#ctor(System.String)">
            <summary>
            Initializes an new instance of the TypeMissingException class with a specified error message
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:DurableTask.Core.FrameworkConstants">
            <summary>
            Shared framework constants
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TaskMessageContentType">
            <summary>
            The content type of a Task Message
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.StateMessageContentType">
            <summary>
            The content type of a State Message
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.HistoryEventIndexPropertyName">
            <summary>
            The property name of a history event index
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.FakeTimerIdToSplitDecision">
            <summary>
            Id for a fake timer event
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.OrchestrationTransientErrorBackOffSecs">
            <summary>
            The default error backoff for transient errors task orchestrations in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.OrchestrationNonTransientErrorBackOffSecs">
            <summary>
            The default error backoff for non-transient errors task orchestrations in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.OrchestrationDefaultDispatcherCount">
            <summary>
            The default number of orchestration dispatchers
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.OrchestrationDefaultMaxConcurrentItems">
            <summary>
            The default max concurrent orchestration work items
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.ActivityTransientErrorBackOffSecs">
            <summary>
            The default error backoff for transient errors task activities in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.ActivityNonTransientErrorBackOffSecs">
            <summary>
            The default error backoff for non-transient errors task activities in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.ActivityDefaultDispatcherCount">
            <summary>
            The default number of activity dispatchers
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.ActivityDefaultMaxConcurrentItems">
            <summary>
            The default max concurrent activity work items
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TrackingTransientErrorBackOffSecs">
            <summary>
            The default error backoff for transient errors tracking activities in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TrackingNonTransientErrorBackOffSecs">
            <summary>
            The default error backoff for non-transient errors tracking activities in seconds
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TrackingDefaultDispatcherCount">
            <summary>
            The default number of tracking dispatchers
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TrackingDefaultMaxConcurrentItems">
            <summary>
            The default max concurrent tracking work items
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.TrackingTrackHistoryEvents">
            <summary>
            The default setting for enabling tracking history events
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.JumpStartDefaultInterval">
            <summary>
            The default timespan for the JumpStart interval
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.JumpStartDefaultIgnoreWindow">
            <summary>
            The default timespan for the JumpStart ignore window
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.CompressionTypePropertyName">
            <summary>
            The property name for compression type
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.CompressionTypeGzipPropertyValue">
            <summary>
            The property value for compression type gzip
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.CompressionTypeNonePropertyValue">
            <summary>
            The property value for compression type none
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.MessageOverflowThresholdInBytesDefault">
            <summary>
            The default max message size before overflow
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.MessageMaxSizeInBytesDefault">
            <summary>
            The default max allowed message size
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.SessionOverflowThresholdInBytesDefault">
            <summary>
            The default max session size before overflow
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.SessionMaxSizeInBytesDefault">
            <summary>
            The default max allowed session size
            </summary>
        </member>
        <member name="F:DurableTask.Core.FrameworkConstants.BatchFlushIntervalInMilliSecs">
            <summary>
            The default batch flush interval in milli secs
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.EventType">
            <summary>
            Enumeration of event types for orchestration, activity and history events
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.ExecutionStarted">
            <summary>
            Orchestration execution has started event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.ExecutionCompleted">
            <summary>
            Orchestration execution has completed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.ExecutionFailed">
            <summary>
            Orchestration execution has failed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.ExecutionTerminated">
            <summary>
            Orchestration was terminated event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.TaskScheduled">
            <summary>
            Task Activity scheduled event 
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.TaskCompleted">
            <summary>
            Task Activity completed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.TaskFailed">
            <summary>
            Task Activity failed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.SubOrchestrationInstanceCreated">
            <summary>
            Sub Orchestration instance created event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.SubOrchestrationInstanceCompleted">
            <summary>
            Sub Orchestration instance completed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.SubOrchestrationInstanceFailed">
            <summary>
            Sub Orchestration instance failed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.TimerCreated">
            <summary>
            Timer created event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.TimerFired">
            <summary>
            Timer fired event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.OrchestratorStarted">
            <summary>
            Orchestration has started event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.OrchestratorCompleted">
            <summary>
            Orchestration has completed event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.EventRaised">
            <summary>
            External Event raised to orchestration event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.ContinueAsNew">
            <summary>
            Orchestration Continued as new event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.GenericEvent">
            <summary>
            Generic event for tracking event existance
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.EventType.HistoryState">
            <summary>
            Orchestration state history event
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.ExecutionCompletedEvent">
            <summary>
            A history event for execution completed
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.ExecutionCompletedEvent.#ctor(System.Int32,System.String,DurableTask.Core.OrchestrationStatus)">
            <summary>
            Creates a new ExecutionCompletedEvent with the supplied parameters
            </summary>
            <param name="eventId">The event integer id</param>
            <param name="result">The string serialized completion result</param>
            <param name="orchestrationStatus">The orchestration status</param>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionCompletedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionCompletedEvent.OrchestrationStatus">
            <summary>
            Gets the history events orchestration status
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionCompletedEvent.Result">
            <summary>
            Gets the serialized completion result
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.ExecutionStartedEvent">
            <summary>
            A history event for orchestration execution starting
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.ExecutionStartedEvent.OrchestrationInstance">
            <summary>
            The orchestration instance for this event
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.ExecutionStartedEvent.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new ExecutionStartedEvent with the supplied parameters
            </summary>
            <param name="eventId">The evnet id of the history event</param>
            <param name="input">The serialized orchestration input </param>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.ParentInstance">
            <summary>
            Gets or sets the parent instance of the event 
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.Name">
            <summary>
            Gets or sets the orchestration name
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.Version">
            <summary>
            Gets or sets the orchestration version
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.Input">
            <summary>
            Gets or sets the serialized input to the orchestration
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionStartedEvent.Tags">
            <summary>
            Gets or sets a dictionary of tags of string, string
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.ExecutionTerminatedEvent">
            <summary>
            A history event for orchestration abrupt termination
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.ExecutionTerminatedEvent.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new ExecutionTerminatedEvent with the supplied params
            </summary>
            <param name="eventId">The eventid of the history event</param>
            <param name="input">The serialized input of the termination event</param>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionTerminatedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.ExecutionTerminatedEvent.Input">
            <summary>
            Gets or sets the serialized input for the the termination event
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.GenericEvent">
            <summary>
            Generic History event
            </summary>
        </member>
        <member name="F:DurableTask.Core.History.GenericEvent.Data">
            <summary>
            String data for this event
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.GenericEvent.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new GenericEvent with the supplied eventid and data
            </summary>
            <param name="eventId">The integer event id</param>
            <param name="data">The data for the event</param>
        </member>
        <member name="P:DurableTask.Core.History.GenericEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.HistoryEvent">
            <summary>
            Base class for history events
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.HistoryEvent.#ctor(System.Int32)">
            <summary>
            Creates a new history event with the supplied eventid
            </summary>
            <param name="eventId">The integer event id</param>
        </member>
        <member name="P:DurableTask.Core.History.HistoryEvent.EventId">
            <summary>
            Gets the event id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.HistoryEvent.IsPlayed">
            <summary>
            Gets the isplayed status
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.HistoryEvent.Timestamp">
            <summary>
            Gets the event timestamp
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.HistoryEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.HistoryEvent.ExtensionData">
            <summary>
            Implementation for <see cref="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData"/>.
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.HistoryStateEvent">
            <summary>
            History state event
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.HistoryStateEvent.#ctor(System.Int32,DurableTask.Core.OrchestrationState)">
            <summary>
            Creates a new HistoryStateEvent with the supplied eventid and state
            </summary>
            <param name="eventId">The integer event id</param>
            <param name="state">The event state</param>
        </member>
        <member name="P:DurableTask.Core.History.HistoryStateEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.HistoryStateEvent.State">
            <summary>
            Gets the orchestration state
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent">
            <summary>
            A history event for sub orchestration instance completion
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Create a new SubOrchestrationInstanceCompletedEvent with the supplied params
            </summary>
            <param name="eventId">The event id of the history event</param>
            <param name="taskScheduledId">The scheduled parent instance event id</param>
            <param name="result">The serialized result</param>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent.TaskScheduledId">
            <summary>
            Gets the scheduled parent instance event id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent.Result">
            <summary>
            Get the serialized result
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent">
            <summary>
            A history event for sub orchestration instance creation
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.#ctor(System.Int32)">
            <summary>
            Creates a new SubOrchestrationInstanceCreatedEvent with the supplied eventid
            </summary>
            <param name="eventId">The event id of the history event</param>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.Name">
            <summary>
            Gets or sets the sub orchestration Name
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.Version">
            <summary>
            Gets or sets the sub orchestration Version
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.InstanceId">
            <summary>
            Gets or sets the instance Id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent.Input">
            <summary>
            Gets or sets the sub orchestration's serialized input
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent">
            <summary>
            A history event for a sub orchestration instance failure
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new SubOrchestrationInstanceFailedEvent with the supplied params
            </summary>
            <param name="eventId">The event id of the history event</param>
            <param name="taskScheduledId">The scheduled parent instance event id</param>
            <param name="reason">The sub orchestration failure reason</param>
            <param name="details">Details of the sub orchestration failure</param>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent.TaskScheduledId">
            <summary>
            Gets the scheduled parent instance event id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent.Reason">
            <summary>
            Gets the sub orchestration failure reason
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.SubOrchestrationInstanceFailedEvent.Details">
            <summary>
            Gets the details of the sub orchestration failure
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.TaskCompletedEvent">
            <summary>
            A history event for a task completion
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.TaskCompletedEvent.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new TaskCompletedEvent with the supplied parameters
            </summary>
            <param name="eventId">The event id of the history event</param>
            <param name="taskScheduledId">The scheduled parent instance event id</param>
            <param name="result">The serialized result of the task</param>
        </member>
        <member name="P:DurableTask.Core.History.TaskCompletedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskCompletedEvent.TaskScheduledId">
            <summary>
            Gets the scheduled parent instance event id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskCompletedEvent.Result">
            <summary>
            Gets the serialized result of the task
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.TaskFailedEvent">
            <summary>
            A history event for a task failure
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.TaskFailedEvent.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new TaskFailedEvent with the supplied parameters
            </summary>
            <param name="eventId">The event id of the history event</param>
            <param name="taskScheduledId">The scheduled parent instance event id</param>
            <param name="reason">The task failure reason</param>
            <param name="details">Details of the task failure</param>
        </member>
        <member name="P:DurableTask.Core.History.TaskFailedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskFailedEvent.TaskScheduledId">
            <summary>
            Gets the scheduled parent instance event id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskFailedEvent.Reason">
            <summary>
            Gets the task failure reason
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskFailedEvent.Details">
            <summary>
            Gets details of the task failure
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.TaskScheduledEvent">
            <summary>
            A history event for a new task scheduled
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.TaskScheduledEvent.#ctor(System.Int32)">
            <summary>
            Creates a new TaskScheduledEvent with the supplied event id
            </summary>
            <param name="eventId">The event id of the history event</param>
        </member>
        <member name="P:DurableTask.Core.History.TaskScheduledEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskScheduledEvent.Name">
            <summary>
            Gets or sets the orchestration Name
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskScheduledEvent.Version">
            <summary>
            Gets or sets the orchestration Version
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TaskScheduledEvent.Input">
            <summary>
            Gets or sets the task's serialized input
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.TimerCreatedEvent">
            <summary>
            A history event for a new timer creation
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.TimerCreatedEvent.#ctor(System.Int32)">
            <summary>
            Creates a new TimerCreatedEvent with the supplied event id
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="P:DurableTask.Core.History.TimerCreatedEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TimerCreatedEvent.FireAt">
            <summary>
            Gets or sets the desired datetime to fire
            </summary>
        </member>
        <member name="T:DurableTask.Core.History.TimerFiredEvent">
            <summary>
            A history event for a timer firing
            </summary>
        </member>
        <member name="M:DurableTask.Core.History.TimerFiredEvent.#ctor(System.Int32)">
            <summary>
            Creates a new TimerFiredEvent with the supplied event id
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="P:DurableTask.Core.History.TimerFiredEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TimerFiredEvent.TimerId">
            <summary>
            Gets or sets the timer id
            </summary>
        </member>
        <member name="P:DurableTask.Core.History.TimerFiredEvent.FireAt">
            <summary>
            Gets or sets datetime to fire
            </summary>
        </member>
        <member name="T:DurableTask.Core.INameVersionInfo">
            <summary>
            Interface for name and version class to be used in lookup mappings
            </summary>
        </member>
        <member name="P:DurableTask.Core.INameVersionInfo.Name">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="P:DurableTask.Core.INameVersionInfo.Version">
            <summary>
            The version of the method
            </summary>
        </member>
        <member name="T:DurableTask.Core.INameVersionObjectManager`1">
            <summary>
            Interface for name and version manager class to be used in type lookup mappings
            </summary>
        </member>
        <member name="M:DurableTask.Core.INameVersionObjectManager`1.Add(DurableTask.Core.ObjectCreator{`0})">
            <summary>
            Adds a new ObjectCreator to the name version Object manager
            </summary>
            <param name="creator">Class for creation of a new name and version instance</param>
        </member>
        <member name="M:DurableTask.Core.INameVersionObjectManager`1.GetObject(System.String,System.String)">
            <summary>
            Gets a creator class instance based on a name and version
            </summary>
            <param name="name">Name of the class to return the creator for</param>
            <param name="version">Version of the class to return the creator for</param>
            <returns>Class instance based on the matching creator class for the supplied name and version</returns>
        </member>
        <member name="T:DurableTask.Core.IOrchestrationService">
            <summary>
            Orchestration Service interface for performing task hub management operations 
            and handling orchestrations and work items' state
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.StartAsync">
            <summary>
            Starts the service initializing the required resources
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.StopAsync">
            <summary>
            Stops the orchestration service gracefully
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.StopAsync(System.Boolean)">
            <summary>
            Stops the orchestration service with optional forced flag
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.CreateAsync">
            <summary>
            Deletes and Creates the neccesary resources for the orchestration service and the instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.CreateAsync(System.Boolean)">
            <summary>
            Deletes and Creates the neccesary resources for the orchestration service and optionally the instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.CreateIfNotExistsAsync">
            <summary>
            Creates the neccesary resources for the orchestration service and the instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.DeleteAsync">
            <summary>
            Deletes the resources for the orchestration service and the instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.DeleteAsync(System.Boolean)">
            <summary>
            Deletes the resources for the orchestration service and optionally the instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.IsMaxMessageCountExceeded(System.Int32,DurableTask.Core.OrchestrationRuntimeState)">
            <summary>
                Checks the message count against the threshold to see if a limit is being exceeded
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.GetDelayInSecondsAfterOnProcessException(System.Exception)">
            <summary>
            Inspects an exception to get a custom delay based on the exception (e.g. transient) properties for a process exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.GetDelayInSecondsAfterOnFetchException(System.Exception)">
            <summary>
            Inspects an exception to get a custom delay based on the exception (e.g. transient) properties for a fetch exception
            </summary>
        </member>
        <member name="P:DurableTask.Core.IOrchestrationService.TaskOrchestrationDispatcherCount">
            <summary>
            Gets the number of task orchestration dispatchers
            </summary>
        </member>
        <member name="P:DurableTask.Core.IOrchestrationService.MaxConcurrentTaskOrchestrationWorkItems">
            <summary>
            Gets the maximum number of concurrent task orchestration items
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.LockNextTaskOrchestrationWorkItemAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Wait for the next orchestration work item and return the orchestration work item
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.RenewTaskOrchestrationWorkItemLockAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <summary>
                Renew the lock on an orchestration
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.CompleteTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem,DurableTask.Core.OrchestrationRuntimeState,System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationState)">
            <summary>
                Complete an orchestation, send any outbound messages and completes the session for all current messages
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.AbandonTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <summary>
                Abandon an orchestation, this abandons ownership/locking of all messages for an orchestation and it's session
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.ReleaseTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <summary>
                Release the lock on an orchestration, releases the session, decoupled from CompleteTaskOrchestrationWorkItemAsync to handle nested orchestrations
            </summary>
        </member>
        <member name="P:DurableTask.Core.IOrchestrationService.TaskActivityDispatcherCount">
            <summary>
            Gets the number of task activity dispatchers
            </summary>
        </member>
        <member name="P:DurableTask.Core.IOrchestrationService.MaxConcurrentTaskActivityWorkItems">
            <summary>
            Gets the maximum number of concurrent task activity items
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.LockNextTaskActivityWorkItem(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
               Wait for an lock the next task activity to be processed 
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.RenewTaskActivityWorkItemLockAsync(DurableTask.Core.TaskActivityWorkItem)">
            <summary>
               Renew the lock on a still processing work item
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.CompleteTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem,DurableTask.Core.TaskMessage)">
            <summary>
               Atomically complete a work item and send the response messages
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationService.AbandonTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem)">
            <summary>
               Abandons a single work item and releases the lock on it
            </summary>
        </member>
        <member name="T:DurableTask.Core.IOrchestrationServiceClient">
            <summary>
            Interface to allow creation of new task orchestrations and query their status.
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage)">
            <summary>
            Creates a new orchestration
            </summary>
            <param name="creationMessage">Orchestration creation message</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.SendTaskOrchestrationMessageAsync(DurableTask.Core.TaskMessage)">
            <summary>
            Send a new message for an orchestration
            </summary>
            <param name="message">Message to send</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.SendTaskOrchestrationMessageBatchAsync(DurableTask.Core.TaskMessage[])">
            <summary>
            Send a new set of messages for an orchestration
            </summary>
            <param name="messages">Messages to send</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.WaitForOrchestrationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Wait for an orchestration to reach any terminal state within the given timeout
            </summary>
            <param name="instanceId">Instance id of the orchestration</param>
            <param name="executionId">Execution id of the orchestration</param>
            <param name="timeout">Maximum amount of time to wait</param>
            <param name="cancellationToken">Task cancellation token</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.ForceTerminateTaskOrchestrationAsync(System.String,System.String)">
            <summary>
            Forcefully terminate the specified orchestration instance
            </summary>
            <param name="instanceId">Instance to terminate</param>
            <param name="reason">Reason for termination</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationStateAsync(System.String,System.Boolean)">
            <summary>
            Get a list of orchestration states from the instance storage for the most current execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="allExecutions">True if method should fetch all executions of the instance, false if the method should only fetch the most recent execution</param>
            <returns>List of OrchestrationState objects that represents the list of orchestrations in the instance store</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationStateAsync(System.String,System.String)">
            <summary>
            Get a list of orchestration states from the instance storage for the specified execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="executionId">Exectuion id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationHistoryAsync(System.String,System.String)">
            <summary>
            Get a string dump of the execution history of the specified orchestration instance specified execution (generation) of the specified instance
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="executionId">Exectuion id</param>
            <returns>String with formatted JSON representing the execution history</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceClient.PurgeOrchestrationHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Purges orchestration instance state and history for orchestrations older than the specified threshold time.
            Also purges the blob storage.
            </summary>
            <param name="thresholdDateTimeUtc">Threshold date time in UTC</param>
            <param name="timeRangeFilterType">What to compare the threshold date time against</param>
        </member>
        <member name="T:DurableTask.Core.IOrchestrationServiceInstanceStore">
            <summary>
            Instance Store provider interface to allow storage and lookup for orchestration state and event history
            </summary>
        </member>
        <member name="P:DurableTask.Core.IOrchestrationServiceInstanceStore.MaxHistoryEntryLength">
            <summary>
            Gets the maximum length a history entry can be so it can be truncated if neccesary
            </summary>
            <returns>The maximum length</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.InitializeStoreAsync(System.Boolean)">
            <summary>
            Runs initialization to prepare the instance store for use
            </summary>
            <param name="recreate">Flag to indicate whether the store should be recreated.</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.DeleteStoreAsync">
            <summary>
            Deletes instances instance store
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.WriteEntitiesAsync(System.Collections.Generic.IEnumerable{DurableTask.Core.Tracking.InstanceEntityBase})">
            <summary>
            Writes a list of history events to instance store
            </summary>
            <param name="entities">List of history events to write</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.GetEntitiesAsync(System.String,System.String)">
            <summary>
            Get a list of state events from instance store
            </summary>
            <param name="instanceId">The instance id to return state for</param>
            <param name="executionId">The execution id to return state for</param>
            <returns>The matching orchestation state or null if not found</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.DeleteEntitiesAsync(System.Collections.Generic.IEnumerable{DurableTask.Core.Tracking.InstanceEntityBase})">
            <summary>
            Deletes a list of history events from instance store
            </summary>
            <param name="entities">List of history events to delete</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.GetOrchestrationStateAsync(System.String,System.Boolean)">
            <summary>
            Gets a list of orchestration states for a given instance
            </summary>
            <param name="instanceId">The instance id to return state for</param>
            <param name="allInstances">Flag indiciation whether to get all history execution ids or just the most recent</param>
            <returns>List of matching orchestration states</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.GetOrchestrationStateAsync(System.String,System.String)">
            <summary>
            Gets the orchestration state for a given instance and execution id
            </summary>
            <param name="instanceId">The instance id to return state for</param>
            <param name="executionId">The execution id to return state for</param>
            <returns>The matching orchestation state or null if not found</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.GetOrchestrationHistoryEventsAsync(System.String,System.String)">
            <summary>
            Gets the list of history events for a given instance and execution id
            </summary>
            <param name="instanceId">The instance id to return history for</param>
            <param name="executionId">The execution id to return history for</param>
            <returns>List of history events</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.PurgeOrchestrationHistoryEventsAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Purges history from storage for given time range
            </summary>
            <param name="thresholdDateTimeUtc">The datetime in UTC to use as the threshold for purging history</param>
            <param name="timeRangeFilterType">What to compare the threshold date time against</param>
            <returns>The number of history events purged.</returns>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.WriteJumpStartEntitiesAsync(System.Collections.Generic.IEnumerable{DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity})">
            <summary>
            Writes a list of jump start events to instance store
            </summary>
            <param name="entities">List of jump start events to write</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.DeleteJumpStartEntitiesAsync(System.Collections.Generic.IEnumerable{DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity})">
            <summary>
            Deletes a list of jump start events from instance store
            </summary>
            <param name="entities">List of jump start events to delete</param>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationServiceInstanceStore.GetJumpStartEntitiesAsync(System.Int32)">
            <summary>
            Get a list of jump start events from instance store
            </summary>
            <returns>List of jump start events</returns>
        </member>
        <member name="T:DurableTask.Core.IOrchestrationSession">
            <summary>
            Interface allowing providers to implement extended sessions (aka "sticky sessions").
            </summary>
        </member>
        <member name="M:DurableTask.Core.IOrchestrationSession.FetchNewOrchestrationMessagesAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <summary>
            When implemented, fetches a new batch of messages for a particular work item.
            </summary>
            <remarks>
            Implementors of this method should feel free to block until new messages are available,
            or until an internal wait period has expired. In either case, <c>null</c> can be returned
            and the dispatcher will shut down the session.
            </remarks>
        </member>
        <member name="T:DurableTask.Core.Middleware.DispatchMiddlewareContext">
            <summary>
            Context data that can be used to share data between middleware.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Middleware.DispatchMiddlewareContext.SetProperty``1(``0)">
            <summary>
            Sets a property value to the context using the full name of the type as the key.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:DurableTask.Core.Middleware.DispatchMiddlewareContext.SetProperty``1(System.String,``0)">
            <summary>
            Sets a named property value to the context.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:DurableTask.Core.Middleware.DispatchMiddlewareContext.GetProperty``1">
            <summary>
            Gets a property value from the context using the full name of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <returns>The value of the property or <c>default(T)</c> if the property is not defined.</returns>
        </member>
        <member name="M:DurableTask.Core.Middleware.DispatchMiddlewareContext.GetProperty``1(System.String)">
            <summary>
            Gets a named property value from the context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The name of the property value.</param>
            <returns>The value of the property or <c>default(T)</c> if the property is not defined.</returns>
        </member>
        <member name="P:DurableTask.Core.Middleware.DispatchMiddlewareContext.Properties">
            <summary>
            Gets a key/value collection that can be used to share data between middleware.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Middleware.DispatchMiddlewareDelegate">
            <summary>
            A function that runs in the task execution middleware pipeline.
            </summary>
            <param name="context">The <see cref="T:DurableTask.Core.Middleware.DispatchMiddlewareContext"/> for the task execution.</param>
            <returns>A task that represents the completion of the durable task execution.</returns>
        </member>
        <member name="T:DurableTask.Core.NameValueObjectCreator`1">
            <summary>
            Object instance creator for a type using name and version mapping
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DurableTask.Core.NameValueObjectCreator`1.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a new DefaultObjectCreator of supplied type with supplied name and version for mapping
            </summary>
            <param name="name">Lookup name for the type</param>
            <param name="version">Lookup version for the type</param>
            <param name="type">Type to use for the creator</param>
        </member>
        <member name="M:DurableTask.Core.NameValueObjectCreator`1.#ctor(System.String,System.String,`0)">
            <summary>
            Creates a new DefaultObjectCreator of supplied object instance's type with supplied name and version for mapping
            </summary>
            <param name="name">Lookup name for the type</param>
            <param name="version">Lookup version for the type</param>
            <param name="instance">Object instances to infer the type from</param>
        </member>
        <member name="T:DurableTask.Core.NameVersionHelper">
            <summary>
            Helper class for getting name information from types and instances
            </summary>
        </member>
        <member name="M:DurableTask.Core.NameVersionHelper.GetDefaultName(System.Object)">
            <summary>
            Gets the default name of an Object instance without using fully qualified names
            </summary>
            <param name="obj">Object to get the name for</param>
            <returns>Name of the object instance's type</returns>
        </member>
        <member name="M:DurableTask.Core.NameVersionHelper.GetDefaultName(System.Object,System.Boolean)">
            <summary>
            Gets the default name of an Object instance using reflection
            </summary>
            <param name="obj">Object to get the name for</param>
            <param name="useFullyQualifiedMethodNames">Boolean inficating whether to use fully qualified names or not</param>
            <returns>Name of the object instance's type</returns>
        </member>
        <member name="M:DurableTask.Core.NameVersionHelper.GetDefaultVersion(System.Object)">
            <summary>
            Gets the default version for an object instance's type
            </summary>
            <param name="obj">Object to get the version for</param>
            <returns>The version as string</returns>
        </member>
        <member name="T:DurableTask.Core.ObjectCreator`1">
            <summary>
            Abstract class for object creation based on name and version
            </summary>
            <typeparam name="T">The type to create</typeparam>
        </member>
        <member name="P:DurableTask.Core.ObjectCreator`1.Name">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="P:DurableTask.Core.ObjectCreator`1.Version">
            <summary>
            The version of the method
            </summary>
        </member>
        <member name="M:DurableTask.Core.ObjectCreator`1.Create">
            <summary>
            Instance creator method
            </summary>
            <returns>An intance of the type T</returns>
        </member>
        <member name="T:DurableTask.Core.OrchestrationContext">
            <summary>
            Context for an orchestration containing the instance, replay status, orchestration methods and proxy methods
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationContext.IsOrchestratorThread">
            <summary>
            Thread-static variable used to signal whether the calling thread is the orchestrator thread.
            The primary use case is for detecting illegal async usage in orchestration code.
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationContext.OrchestrationInstance">
            <summary>
            Instance of the currently executing orchestration
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationContext.CurrentUtcDateTime">
            <summary>
            Replay-safe current UTC datetime
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationContext.IsReplaying">
            <summary>
                True if the code is currently replaying, False if code is truly executing for the first time.
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateClient``1">
            <summary>
                Create a proxy client class to schedule remote TaskActivities via a strongly typed interface.
            </summary>
            <typeparam name="T">The interface for the proxy client</typeparam>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateClient``1(System.Boolean)">
            <summary>
                Create a proxy client class to schedule remote TaskActivities via a strongly typed interface.
            </summary>
            <typeparam name="T">The interface for the proxy client</typeparam>
            <param name="useFullyQualifiedMethodNames">
                If true, the method name translation from the interface contains
                the interface name, if false then only the method name is used
            </param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateRetryableClient``1(DurableTask.Core.RetryOptions)">
            <summary>
                Creates a proxy client with built-in retry logic.
            </summary>
            <typeparam name="T">
                Task version of the client interface.
                This is similar to the actual interface implemented by the client but with the
                return types always of the form Task&lt;TOriginal&gt;
                where TOriginal was the return
                type for the same method in the original interface
            </typeparam>
            <param name="retryOptions">Retry policies</param>
            <returns>Dynamic proxy that can be used to schedule the remote tasks</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateRetryableClient``1(DurableTask.Core.RetryOptions,System.Boolean)">
            <summary>
                Creates a proxy client with built-in retry logic.
            </summary>
            <typeparam name="T">
                Task version of the client interface.
                This is similar to the actual interface implemented by the client but with the
                return types always of the form Task&lt;TOriginal&gt;
                where TOriginal was the return
                type for the same method in the original interface
            </typeparam>
            <param name="retryOptions">Retry policies</param>
            <param name="useFullyQualifiedMethodNames">
                If true, the method name translation from the interface contains
                the interface name, if false then only the method name is used
            </param>
            <returns>Dynamic proxy that can be used to schedule the remote tasks</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ScheduleWithRetry``1(System.Type,DurableTask.Core.RetryOptions,System.Object[])">
            <summary>
                Schedule a TaskActivity by type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="taskActivityType">Type that dervices from TaskActivity class</param>
            <param name="retryOptions">Retry policy</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ScheduleWithRetry``1(System.String,System.String,DurableTask.Core.RetryOptions,System.Object[])">
            <summary>
                Schedule a TaskActivity by name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="retryOptions">Retry policy</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.Type,DurableTask.Core.RetryOptions,System.Object)">
            <summary>
                Create a suborchestration of the specified type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.Type,System.String,DurableTask.Core.RetryOptions,System.Object)">
            <summary>
                Create a suborchestration of the specified type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="instanceId">Instance Id of the suborchestration</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.String,System.String,DurableTask.Core.RetryOptions,System.Object)">
            <summary>
                Create a suborchestration of the specified name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.String,System.String,System.String,DurableTask.Core.RetryOptions,System.Object)">
            <summary>
                Create a suborchestration of the specified name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance Id of the suborchestration</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ScheduleTask``1(System.Type,System.Object[])">
            <summary>
                Schedule a TaskActivity by type.
            </summary>
            <typeparam name="TResult">Return Type of the TaskActivity.Execute method</typeparam>
            <param name="activityType">Type that dervices from TaskActivity class</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ScheduleTask``1(System.String,System.String,System.Object[])">
            <summary>
                Schedule a TaskActivity by name and version.
            </summary>
            <typeparam name="TResult">Return Type of the TaskActivity.Execute method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateTimer``1(System.DateTime,``0)">
            <summary>
                Create a timer that will fire at the specified time and hand back the specified state.
            </summary>
            <typeparam name="T">Type of state object</typeparam>
            <param name="fireAt">Absolute time at which the timer should fire</param>
            <param name="state">The state to be handed back when the timer fires</param>
            <returns>Task that represents the async wait on the timer</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateTimer``1(System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
                Create a timer that will fire at the specified time and hand back the specified state.
            </summary>
            <typeparam name="T">Type of state object</typeparam>
            <param name="fireAt">Absolute time at which the timer should fire</param>
            <param name="state">The state to be handed back when the timer fires</param>
            <param name="cancelToken">Cancellation token</param>
            <returns>Task that represents the async wait on the timer</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstance``1(System.Type,System.Object)">
            <summary>
                Create a suborchestration of the specified type.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstance``1(System.Type,System.String,System.Object)">
            <summary>
                Create a suborchestration of the specified type with the specified instance id
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="instanceId">InstanceId of the suborchestration to create</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstance``1(System.String,System.String,System.Object)">
            <summary>
                Create a suborchestration of the specified name and version.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstance``1(System.String,System.String,System.String,System.Object)">
            <summary>
                Create a suborchestration of the specified name and version with the specific instance id
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">InstanceId of the suborchestration to create</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.CreateSubOrchestrationInstance``1(System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Create a suborchestration of the specified name and version with the specific instance id
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">InstanceId of the suborchestration to create</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <param name="tags">Dictionary of key/value tags associated with this instance</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ContinueAsNew(System.Object)">
            <summary>
                Checkpoint the orchestration instance by completing the current execution in the ContinueAsNew
                state and creating a new execution of this instance with the specified input parameter.
                This is useful in unbounded workflows to ensure that the execution history gets cleaned up regularly and
                does not overflow the preset size limit.
            </summary>
            <param name="input">
                Input to the new execution of this instance. This is the same type as the one used to start
                the first execution of this orchestration instance.
            </param>
        </member>
        <member name="M:DurableTask.Core.OrchestrationContext.ContinueAsNew(System.String,System.Object)">
            <summary>
                Checkpoint the orchestration instance by completing the current execution in the ContinueAsNew
                state and creating a new execution of this instance with the specified input parameter.
                This is useful in unbounded workflows to ensure that the execution history gets cleaned up regularly and
                does not overflow the preset size limit.
            </summary>
            <param name="newVersion">
                New version of the orchestration to start
            </param>
            <param name="input">
                Input to the new execution of this instance. This is the same type as the one used to start
                the first execution of this orchestration instance.
            </param>
        </member>
        <member name="T:DurableTask.Core.OrchestrationInstance">
            <summary>
            Represents the state of an orchestration instance
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationInstance.InstanceId">
            <summary>
            The instance id, assigned as unique to the orchestration
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationInstance.ExecutionId">
            <summary>
            The execution id, unique to the execution of this instance
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationInstance.GetHashCode">
            <summary>
            Serves as a hash function for an OrchestrationInstance. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationInstance.ToString">
            <summary>
            Returns a string that represents the OrchestrationInstance.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:DurableTask.Core.OrchestrationInstance.ExtensionData">
            <summary>
            Implementation for <see cref="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData"/>.
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationRuntimeState">
            <summary>
            Represents the runtime state of an orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeState.Events">
            <summary>
            List of all history events for this runtime state
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeState.NewEvents">
            <summary>
            List of new events added during an execution to keep track of the new events that were added during a particular execution 
            should not be serialized
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeState.CompressedSize">
            <summary>
            Compressed size of the serialized state
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeState.Size">
            <summary>
            Size of the serialized state (uncompressed)
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeState.Status">
            <summary>
            The string status of the runtime state
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationRuntimeState.#ctor">
            <summary>
            Creates a new instance of the OrchestrationRuntimeState
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationRuntimeState.#ctor(System.Collections.Generic.IList{DurableTask.Core.History.HistoryEvent})">
            <summary>
            Creates a new instance of the OrchestrationRuntimeState with the supplied events
            </summary>
            <param name="events">List of events for this runtime state</param>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.ExecutionStartedEvent">
            <summary>
            Gets the execution started event
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.CreatedTime">
            <summary>
            Gets the created time of the ExecutionStartedEvent
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.CompletedTime">
            <summary>
            Gets the created time of the ExecutionCompletedEvent if completed else a safe (from timezone shift) max datetime
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.Input">
            <summary>
            Gets the serialized input of the ExecutionStartedEvent
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.Output">
            <summary>
            Gets the serialized output of the ExecutionCompletedEvent if compeleted else null
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.Name">
            <summary>
            Gets the orchestration name of the ExecutionStartedEvent
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.Version">
            <summary>
            Gets the orchestraion version of the ExecutionStartedEvent
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.Tags">
            <summary>
            Gets the tags from the ExecutionStartedEvent
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.OrchestrationStatus">
            <summary>
            Gets the status of the orchestation
            If complete then the status from the ExecutionCompletedEvent else Running.
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.OrchestrationInstance">
            <summary>
            Gets the OrchestrationInstance of the ExecutionStartedEvent else null
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationRuntimeState.ParentInstance">
            <summary>
            Gets the ParentInstance of the ExecutionStartedEvent else null
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationRuntimeState.AddEvent(DurableTask.Core.History.HistoryEvent)">
            <summary>
            Adds a new history event to the Events list and NewEvents list
            </summary>
            <param name="historyEvent">The new history event to add</param>
        </member>
        <member name="M:DurableTask.Core.OrchestrationRuntimeState.AddEvent(DurableTask.Core.History.HistoryEvent,System.Boolean)">
            <summary>
            Adds a new history event to the Events list and optionally NewEvents list
            </summary>
            <param name="historyEvent">The history event to add</param>
            <param name="isNewEvent">Flag indicating whether this is a new event or not</param>
        </member>
        <member name="M:DurableTask.Core.OrchestrationRuntimeState.GetOrchestrationRuntimeStateDump">
            <summary>
            Gets a statedump of the current list of events
            </summary>
            <returns></returns>
        </member>
        <member name="T:DurableTask.Core.OrchestrationRuntimeStateDump">
            <summary>
            A snapshot / state dump of an OrchestrationRuntimeState's events
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeStateDump.Events">
            <summary>
            List of all history events for this runtime state dump
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationRuntimeStateDump.NewEvents">
            <summary>
            List of new events added during an execution for this runtime state dump
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationSessionState">
            <summary>
            The object that represents the serialized session state.
            It holds a list of history events (when blob key is empty),
            or a key for external storage if the serialized stream is too large to fit into the the session state.
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationSessionState.#ctor">
            <summary>
            A constructor for deserialzation.
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationSessionState.#ctor(System.Collections.Generic.IList{DurableTask.Core.History.HistoryEvent})">
            <summary>
            Wrap a list of history events into an OrchestrationSessionState instance, which will be later serialized as a stream saved in session state.
            </summary>
            /// <param name="events">A list of history events.</param>
        </member>
        <member name="M:DurableTask.Core.OrchestrationSessionState.#ctor(System.String)">
            <summary>
            Construct an OrchestrationSessionState instance with a blob key as the blob reference in the external blob storage.
            </summary>
            /// <param name="blobKey">The blob key to access the blob</param>
        </member>
        <member name="P:DurableTask.Core.OrchestrationSessionState.Events">
            <summary>
            List of all history events for runtime state
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationSessionState.BlobKey">
            <summary>
            The blob key for external storage. Could be null or empty if not externally stored.
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationState">
            <summary>
            Represents the state of an orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.CompletedTime">
            <summary>
            Completion datetime of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.CompressedSize">
            <summary>
            The size of the compressed serialized runtimestate
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.CreatedTime">
            <summary>
            Creation time of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Input">
            <summary>
            Serialized input of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.LastUpdatedTime">
            <summary>
            Last updated time of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Name">
            <summary>
            The orchestration name
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.OrchestrationInstance">
            <summary>
            The orchestration instance this state represents
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.OrchestrationStatus">
            <summary>
            The current orchestration status
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Output">
            <summary>
            The serialized output of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.ParentInstance">
            <summary>
            The parent instance if this is orchestration has one
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Size">
            <summary>
            The size of the raw (uncompressed) serialized runtimestate
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Status">
            <summary>
            String status of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Tags">
            <summary>
            The dictionary of tags and string values associated with this orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationState.Version">
            <summary>
            The orchestration version
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationState.ExtensionData">
            <summary>
            Implementation for <see cref="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData"/>.
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateInstanceFilter">
            <summary>
                Filter for Orchestration instance filter
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateInstanceFilter.#ctor">
            <summary>
                Creates a new instance of the OrchestrationStateInstanceFilter with default settings
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateInstanceFilter.InstanceId">
            <summary>
                Gets or sets the InstanceId for the filter
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateInstanceFilter.ExecutionId">
            <summary>
                Gets or sets the ExecutionId for the filter
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateInstanceFilter.StartsWith">
            <summary>
                Gets or sets the match type of either starts with or exact match for the filter
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateNameVersionFilter">
            <summary>
            Filter for Orchestration Name and Version
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateNameVersionFilter.Name">
            <summary>
            Gets or sets the Orchestration Name for the filter
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateNameVersionFilter.Version">
            <summary>
            Gets or sets the Orchestration Version for the filter
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateQuery">
            <summary>
                Query class that can be used to filter results from the Orchestration instance store.
                Instance methods are not thread safe.
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.#ctor">
            <summary>
                Query class that can be used to filter results from the Orchestration instance store.
                Instance methods are not thread safe.
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateQuery.FilterMap">
            <summary>
            Gets the FilterMap for the query
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.GetFilters">
            <summary>
            Gets the primary_filter, collection_of(secondary_filters) for the query
            </summary>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddInstanceFilter(System.String)">
            <summary>
                Adds an exact match instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddInstanceFilter(System.String,System.String)">
            <summary>
                Adds an exact match instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <param name="executionId">Execution Id to filter by</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddInstanceFilter(System.String,System.Boolean)">
            <summary>
                Adds an instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <param name="startsWith">Exact match if set to false, otherwise do a starts-with match</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddNameVersionFilter(System.String)">
            <summary>
                Adds a name filter on the returned orchestrations
            </summary>
            <param name="name">The name of the orchestration to filter by</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddNameVersionFilter(System.String,System.String)">
            <summary>
                Adds a name/version filter on the returned orchestations
            </summary>
            <param name="name">The name of the orchestration to filter by</param>
            <param name="version">The version of the orchestration to filter by</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddStatusFilter(DurableTask.Core.OrchestrationStatus)">
            <summary>
                Adds a status filter on the returned orchestrations
            </summary>
            <param name="status">The status to filter by</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.OrchestrationStateQuery.AddTimeRangeFilter(System.DateTime,System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
                Adds a time range filter on the returned orchestrations
            </summary>
            <param name="startTime">Start of the time range to filter by</param>
            <param name="endTime">End of the time range to filter by</param>
            <param name="filterType">Type of orchestration timestamp to apply filter on</param>
            <returns></returns>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateQueryFilter">
            <summary>
            Abstract class for an orchestration state query filter
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateQuerySegment">
            <summary>
            Partial query results for an orchestration state query
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStateQuerySegment.ContinuationToken">
            <summary>
            The continuation token to obtain more results
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStateQuerySegment.Results">
            <summary>
            The results for the partial query
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateStatusFilter">
            <summary>
            Filter for Orchestration Status
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateStatusFilter.Status">
            <summary>
            Gets or sets the Status for the filter
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateTimeRangeFilter">
            <summary>
            Filter for Orchestration State time range on a time range type
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateTimeRangeFilter.StartTime">
            <summary>
            Gets or sets the StartTime for the filter
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateTimeRangeFilter.EndTime">
            <summary>
            Gets or sets the EndTime for the filter
            </summary>
        </member>
        <member name="P:DurableTask.Core.OrchestrationStateTimeRangeFilter.FilterType">
            <summary>
            Gets or sets the time range filter type for the filter
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStateTimeRangeFilterType">
            <summary>
            Enumeration of the types of time filters for orchestration state queries
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStateTimeRangeFilterType.OrchestrationCreatedTimeFilter">
            <summary>
            Filter based on creation time
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStateTimeRangeFilterType.OrchestrationCompletedTimeFilter">
            <summary>
            Filter based on completion time
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStateTimeRangeFilterType.OrchestrationLastUpdatedTimeFilter">
            <summary>
            Filter based on last update time
            </summary>
        </member>
        <member name="T:DurableTask.Core.OrchestrationStatus">
            <summary>
            Enum describing the status of the orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Running">
            <summary>
            Orchestration state of running
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Completed">
            <summary>
            Orchestration state of complete
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.ContinuedAsNew">
            <summary>
            Orchestration state of continued as new (this instance complete, continued in a new instance)
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Failed">
            <summary>
            Orchestration state of failed
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Canceled">
            <summary>
            Orchestration state of gracefully canceled
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Terminated">
            <summary>
            Orchestration state of abruptly shut down
            </summary>
        </member>
        <member name="F:DurableTask.Core.OrchestrationStatus.Pending">
            <summary>
            Orchestration state of pending (not yet running)
            </summary>
        </member>
        <member name="T:DurableTask.Core.ParentInstance">
            <summary>
            Represents the parent orchestation of a sub orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.ParentInstance.Name">
            <summary>
            The orchestration name of the parent instance
            </summary>
        </member>
        <member name="F:DurableTask.Core.ParentInstance.OrchestrationInstance">
            <summary>
            The orchestration instance of this parent instance
            </summary>
        </member>
        <member name="F:DurableTask.Core.ParentInstance.TaskScheduleId">
            <summary>
            The id of the child orchestration action
            </summary>
        </member>
        <member name="F:DurableTask.Core.ParentInstance.Version">
            <summary>
            The orchestration version of the parent instance
            </summary>
        </member>
        <member name="P:DurableTask.Core.ParentInstance.ExtensionData">
            <summary>
            Implementation for <see cref="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData"/>.
            </summary>
        </member>
        <member name="T:DurableTask.Core.ReflectionBasedTaskActivity">
            <summary>
            Relection based task activity for interface based task activities
            </summary>
        </member>
        <member name="M:DurableTask.Core.ReflectionBasedTaskActivity.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Creates a new ReflectionBasedTaskActivity based on an acticity object and method info
            </summary>
            <param name="activityObject">The activity object to invoke methods on</param>
            <param name="methodInfo">The Reflection.methodInfo for invoking the method on the activity object</param>
        </member>
        <member name="P:DurableTask.Core.ReflectionBasedTaskActivity.DataConverter">
            <summary>
            The dataconverter to use for input and output serialization/deserialization
            </summary>
        </member>
        <member name="P:DurableTask.Core.ReflectionBasedTaskActivity.activityObject">
            <summary>
            The activity object to invoke methods on
            </summary>
        </member>
        <member name="P:DurableTask.Core.ReflectionBasedTaskActivity.MethodInfo">
            <summary>
            The Reflection.methodInfo for invoking the method on the activity object
            </summary>
        </member>
        <member name="M:DurableTask.Core.ReflectionBasedTaskActivity.Run(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Syncronous execute method, blocked for AsyncTaskActivity
            </summary>
            <returns>string.Empty</returns>
        </member>
        <member name="M:DurableTask.Core.ReflectionBasedTaskActivity.RunAsync(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Method for executing a task activity asyncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.ReflectionBasedTaskActivity.InvokeActivity(System.Object[])">
            <summary>
            Invokes the target method on the actiivity object with supplied parameters
            </summary>
            <param name="inputParameters"></param>
            <returns></returns>
        </member>
        <member name="T:DurableTask.Core.RetryInterceptor`1">
            <summary>
            Generic retry class to handle retries on a function call with specified retry options
            </summary>
            <typeparam name="T">Type to return from the called Func</typeparam>
        </member>
        <member name="M:DurableTask.Core.RetryInterceptor`1.#ctor(DurableTask.Core.OrchestrationContext,DurableTask.Core.RetryOptions,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Creates a new instance of the RetryInterceptor with specified parameters
            </summary>
            <param name="context">The orchestraion context of the function call</param>
            <param name="retryOptions">The options for performing retries</param>
            <param name="retryCall">The code to execute</param>
        </member>
        <member name="M:DurableTask.Core.RetryInterceptor`1.Invoke">
            <summary>
            Invokes the method/code to call and retries on exception based on the retry options
            </summary>
            <returns>The return value of the supplied retry call</returns>
            <exception cref="T:System.Exception">The final exception encountered if the call did not succeed</exception>
        </member>
        <member name="T:DurableTask.Core.RetryOptions">
            <summary>
                Contains retry policies that can be passed as parameters to various operations
            </summary>
        </member>
        <member name="M:DurableTask.Core.RetryOptions.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Creates a new instance RetryOptions with the supplied first retry and max attempts
            </summary>
            <param name="firstRetryInterval">Timespan to wait for the first retry</param>
            <param name="maxNumberOfAttempts">Max number of attempts to retry</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.FirstRetryInterval">
            <summary>
            Gets or sets the first retry interval
            </summary>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.MaxRetryInterval">
            <summary>
            Gets or sets the max retry interval
            defaults to TimeSpan.MaxValue
            </summary>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.BackoffCoefficient">
            <summary>
            Gets or sets the backoff coefficient
            defaults to 1, used to determine rate of increase of backoff
            </summary>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.RetryTimeout">
            <summary>
            Gets or sets the timeout for retries
            defaults to TimeSpan.MaxValue
            </summary>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.MaxNumberOfAttempts">
            <summary>
            Gets or sets the max number of attempts
            </summary>
        </member>
        <member name="P:DurableTask.Core.RetryOptions.Handle">
            <summary>
            Gets or sets a Func to call on exception to determine if retries should proceed
            </summary>
        </member>
        <member name="T:DurableTask.Core.Serializing.DataConverter">
            <summary>
            Abstract class for serializing and deserializing data
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.DataConverter.Serialize(System.Object)">
            <summary>
            Serialize an Object to string with default formatting
            </summary>
            <param name="value">Object to serialize</param>
            <returns>Object serialized to a string</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.DataConverter.Serialize(System.Object,System.Boolean)">
            <summary>
            Serialize an Object to string with supplied formatting
            </summary>
            <param name="value">Object to serialize</param>
            <param name="formatted">Boolean indicating whether to format the results or not</param>
            <returns>Object serialized to a string</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.DataConverter.Deserialize(System.String,System.Type)">
            <summary>
            Deserialize a string to an Object of supplied type
            </summary>
            <param name="data">String data of the Object to deserialize</param>
            <param name="objectType">Type to deserialize to</param>
            <returns>Deserialized Object</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.DataConverter.Deserialize``1(System.String)">
            <summary>
            Deserialize a string to an Object of supplied type
            </summary>
            <param name="data">String data of the Object to deserialize</param>
            <typeparam name="T">Type to deserialize to</typeparam>
            <returns>Deserialized Object</returns>
        </member>
        <member name="T:DurableTask.Core.Serializing.JsonCreationConverter`1">
            <summary>
                Helper class for supporting deserialization from JSON into a custom class hierarchy
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonCreationConverter`1.CreateObject(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Create an instance of objectType, based properties in the JSON object
            </summary>
        </member>
        <member name="T:DurableTask.Core.Serializing.JsonDataConverter">
            <summary>
            Class for serializing and deserializing data to and from json
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonDataConverter.#ctor">
            <summary>
            Creates a new instance of the JsonDataConverter with default settings
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonDataConverter.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new instance of the JsonDataConverter with supplied settings
            </summary>
            <param name="settings">Settings for the json serializer</param>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonDataConverter.Serialize(System.Object)">
            <summary>
            Serialize an Object to string with default formatting
            </summary>
            <param name="value">Object to serialize</param>
            <returns>Object serialized to a string</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonDataConverter.Serialize(System.Object,System.Boolean)">
            <summary>
            Serialize an Object to string with supplied formatting
            </summary>
            <param name="value">Object to serialize</param>
            <param name="formatted">Boolean indicating whether to format the results or not</param>
            <returns>Object serialized to a string</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.JsonDataConverter.Deserialize(System.String,System.Type)">
            <summary>
            Deserialize a string to an Object of supplied type
            </summary>
            <param name="data">String data of the Object to deserialize</param>
            <param name="objectType">Type to deserialize to</param>
            <returns>Deserialized Object</returns>
        </member>
        <member name="T:DurableTask.Core.Serializing.PackageUpgradeSerializationBinder">
            <summary>
            SerializationBinder to be used for deserializing DurableTask types that are pre v-2.0, this allows upgrade compaibility.
            This is not sufficient to deserialize objects from 1.0 which had the Tags Property set.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.PackageUpgradeSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.Core.Serializing.PackageUpgradeSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:DurableTask.Core.Serializing.RuntimeStateStreamConverter">
            <summary>
            A converter that does conversion between the OrchestrationRuntimeState instance and a stream after serialization.
            The stream is a serialized OrchestrationSessionState that will set as session state.
            De-serialization is done with fallbacks in the order: OrchestrationSessionState -> OrchestrationRuntimeState -> IList of HistoryEvent.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Serializing.RuntimeStateStreamConverter.OrchestrationRuntimeStateToRawStream(DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.Serializing.DataConverter,System.Boolean,DurableTask.Core.Settings.ISessionSettings,DurableTask.Core.Tracking.IOrchestrationServiceBlobStore,System.String)">
            <summary>
            Convert an OrchestrationRuntimeState instance to a serialized raw stream to be saved in session state.
            </summary>
            <param name="newOrchestrationRuntimeState">The new OrchestrationRuntimeState to be serialized</param>
            <param name="runtimeState">The current runtime state</param>
            <param name="dataConverter">A data converter for serialization and deserialization</param>
            <param name="shouldCompress">True if should compress when serialization</param>
            <param name="serviceBusSessionSettings">The service bus session settings</param>
            <param name="orchestrationServiceBlobStore">A blob store for external blob storage</param>
            <param name="sessionId">The session id</param>
            <returns>A serialized raw strem to be saved in session state</returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.RuntimeStateStreamConverter.RawStreamToRuntimeState(System.IO.Stream,System.String,DurableTask.Core.Tracking.IOrchestrationServiceBlobStore,DurableTask.Core.Serializing.DataConverter)">
            <summary>
            Convert a raw stream to an orchestration runtime state instance.
            </summary>
            <param name="rawSessionStream">The raw session stream to be deserialized</param>
            <param name="sessionId">The session Id</param>
            <param name="orchestrationServiceBlobStore">A blob store for external blob storage</param>
            <param name="dataConverter">>A data converter for serialization and deserialization</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.Serializing.RuntimeStateStreamConverter.DeserializeToRuntimeStateWithFallback(System.String,DurableTask.Core.Serializing.DataConverter,System.String,System.String@)">
             <summary>
             Deserialize the session state to construct an OrchestrationRuntimeState instance.
            
             The session state string could be one of these:
                 1. a serialized IList of HistoryEvent (master branch implementation), or
                 2. a serialized OrchestrationRuntimeState instance with the history event list (vnext branch implementation), or
                 3. a serialized OrchestrationSessionState instance with the history event list or a blob key (latest implementation).
            
             So when doing the deserialization, it is done with fallbacks in the order: OrchestrationSessionState -> OrchestrationRuntimeState -> IList of HistoryEvent, to cover all cases.
            
             </summary>
             <param name="serializedState">The serialized session state</param>
             <param name="dataConverter">A data converter for serialization and deserialization</param>
             <param name="sessionId">The session Id</param>
             <param name="blobKey">The blob key output. Will be set if the state is in external storage.</param>
             <returns>The converted orchestration runtime state.</returns>
        </member>
        <member name="T:DurableTask.Core.Settings.CompressionSettings">
            <summary>
            Compression settings
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.CompressionSettings.Style">
            <summary>
                Type of compression
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.CompressionSettings.ThresholdInBytes">
            <summary>
                Compression threshold in bytes; if specified by compression criteria, compression will not be done
                if size is below this value
            </summary>
        </member>
        <member name="T:DurableTask.Core.Settings.ISessionSettings">
            <summary>
                Settings to configure the Service Bus session.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.ISessionSettings.SessionMaxSizeInBytes">
            <summary>
                The max allowed session size in service bus. Default is 230K.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.ISessionSettings.SessionOverflowThresholdInBytes">
            <summary>
                The max allowed session size for external storage. Default is 10M.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Settings.TaskActivityDispatcherSettings">
            <summary>
                Settings to configure the Task Activity Dispatcher
            </summary>
        </member>
        <member name="M:DurableTask.Core.Settings.TaskActivityDispatcherSettings.#ctor">
            <summary>
                Creates a new instance of the TaskActivityDispatcherSettings with the default settings
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskActivityDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskActivityDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskActivityDispatcherSettings.DispatcherCount">
            <summary>
                How many dispatchers to create. Default is 1.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskActivityDispatcherSettings.MaxConcurrentActivities">
            <summary>
                How many activities to process concurrently. Default is 10.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings">
            <summary>
                Settings to configure the Task Orchestration Dispatcher
            </summary>
        </member>
        <member name="M:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.#ctor">
            <summary>
                Creates a new instance of the TaskOrchestrationDispatcherSettings with default settings
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.DispatcherCount">
            <summary>
                How many dispatchers to create. Default is 1.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.MaxConcurrentOrchestrations">
            <summary>
                How many orchestrations to process concurrently. Default is 100.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings.CompressOrchestrationState">
            <summary>
                Compress the orchestration state to enable more complex orchestrations at the cost of throughput. Default is False.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Settings.TrackingDispatcherSettings">
            <summary>
                Settings to configure the Tracking Dispatcher
            </summary>
        </member>
        <member name="M:DurableTask.Core.Settings.TrackingDispatcherSettings.#ctor">
            <summary>
                Creates a new instance of the TrackingDispatcherSettings with default settings
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TrackingDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TrackingDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
                Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TrackingDispatcherSettings.DispatcherCount">
            <summary>
                How many dispatchers to create. Default is 1.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TrackingDispatcherSettings.MaxConcurrentTrackingSessions">
            <summary>
                How many tracking sessions to process concurrently. Default is 20.
            </summary>
        </member>
        <member name="P:DurableTask.Core.Settings.TrackingDispatcherSettings.TrackHistoryEvents">
            <summary>
                Flag indicating whether to track history events in addition to orchestration state. Default is true
            </summary>
        </member>
        <member name="T:DurableTask.Core.StateMessage">
            <summary>
            Deprecated Wrapper for the OrchestrationState in the Tracking Queue
            </summary>
        </member>
        <member name="F:DurableTask.Core.StateMessage.State">
            <summary>
            The Orchestration State
            </summary>
        </member>
        <member name="T:DurableTask.Core.Stats.Counter">
            <summary>
            Simple counter class
            </summary>
        </member>
        <member name="P:DurableTask.Core.Stats.Counter.Value">
            <summary>
            Gets the current counter value
            </summary>
        </member>
        <member name="M:DurableTask.Core.Stats.Counter.Increment">
            <summary>
            Increments the counter by 1
            </summary>
        </member>
        <member name="M:DurableTask.Core.Stats.Counter.Increment(System.Int64)">
            <summary>
            Increments the counter by the supplied value
            </summary>
            <param name="value">The value to increment the counter by</param>
        </member>
        <member name="M:DurableTask.Core.Stats.Counter.Decrement">
            <summary>
            Decrements the counter by 1
            </summary>
        </member>
        <member name="M:DurableTask.Core.Stats.Counter.Reset">
            <summary>
            Resets the counter back to zero
            </summary>
            <returns>The value of the counter before it was reset</returns>
        </member>
        <member name="M:DurableTask.Core.Stats.Counter.ToString">
            <summary>
            Returns a string that represents the Counter.
            </summary>
        </member>
        <member name="T:DurableTask.Core.TaskActivity">
            <summary>
                Base class for TaskActivity.
                User activity should almost always derive from either TypedTaskActivity
                &lt;TInput, TResult&gt; or TaskActivity&lt;TInput, TResult&gt;
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskActivity.Run(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Abstract method for executing a task activity syncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.TaskActivity.RunAsync(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Virtual method for executing a task activity asyncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="T:DurableTask.Core.AsyncTaskActivity`2">
            <summary>
                Typed base class for creating typed async task activities
            </summary>
            <typeparam name="TInput">Input type for the activity</typeparam>
            <typeparam name="TResult">Output type of the activity</typeparam>
        </member>
        <member name="M:DurableTask.Core.AsyncTaskActivity`2.#ctor">
            <summary>
            Creates a new AsyncTaskActivity with the default dataconverter
            </summary>
        </member>
        <member name="M:DurableTask.Core.AsyncTaskActivity`2.#ctor(DurableTask.Core.Serializing.DataConverter)">
            <summary>
            Creates a new AsyncTaskActivity with the supplied dataconverter
            </summary>
            <param name="dataConverter"></param>
        </member>
        <member name="P:DurableTask.Core.AsyncTaskActivity`2.DataConverter">
            <summary>
            The dataconverter to use for input and output serialization/deserialization
            </summary>
        </member>
        <member name="M:DurableTask.Core.AsyncTaskActivity`2.Run(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Syncronous execute method, blocked for AsyncTaskActivity
            </summary>
            <returns>string.Empty</returns>
        </member>
        <member name="M:DurableTask.Core.AsyncTaskActivity`2.ExecuteAsync(DurableTask.Core.TaskContext,`0)">
            <summary>
            Abstract method for executing a task activity asyncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The typed input</param>
            <returns>The typed output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.AsyncTaskActivity`2.RunAsync(DurableTask.Core.TaskContext,System.String)">
            <summary>
            Method for executing a task activity asyncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="T:DurableTask.Core.TaskActivity`2">
            <summary>
                Typed base class for creating typed sync task activities
            </summary>
            <typeparam name="TInput">Input type for the activity</typeparam>
            <typeparam name="TResult">Output type of the activity</typeparam>
        </member>
        <member name="M:DurableTask.Core.TaskActivity`2.Execute(DurableTask.Core.TaskContext,`0)">
            <summary>
            Abstract method for executing a task activity syncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The typed input</param>
            <returns>The typed output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.TaskActivity`2.ExecuteAsync(DurableTask.Core.TaskContext,`0)">
            <summary>
            Method for executing a task activity asyncronously
            </summary>
            <param name="context">The task context</param>
            <param name="input">The typed input</param>
            <returns>The typed output from the execution</returns>
        </member>
        <member name="T:DurableTask.Core.TaskActivityDispatcher">
            <summary>
            Dispatcher for task activities to handle processing and renewing of work items
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskActivityDispatcher.StartAsync">
            <summary>
            Starts the dispatcher to start getting and processing task activities
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskActivityDispatcher.StopAsync(System.Boolean)">
            <summary>
            Stops the dispatcher to stop getting and processing task activities
            </summary>
            <param name="forced">Flag indicating whether to stop gracefully or immediately</param>
        </member>
        <member name="P:DurableTask.Core.TaskActivityDispatcher.IncludeDetails">
            <summary>
            Gets or sets flag whether to include additional details in error messages
            </summary>
        </member>
        <member name="T:DurableTask.Core.TaskActivityWorkItem">
            <summary>
            An active instance / work item of a task activity
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskActivityWorkItem.Id">
            <summary>
            The Id of the work work item, likely related to the task message
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskActivityWorkItem.LockedUntilUtc">
            <summary>
            The datetime this work item is locked until
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskActivityWorkItem.TaskMessage">
            <summary>
            The task message associated with this work item
            </summary>
        </member>
        <member name="T:DurableTask.Core.TaskContext">
            <summary>
            Task context
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskContext.#ctor(DurableTask.Core.OrchestrationInstance)">
            <summary>
            Creates a new TaskContext with the supplied OrchestrationInstance
            </summary>
            <param name="orchestrationInstance"></param>
        </member>
        <member name="P:DurableTask.Core.TaskContext.OrchestrationInstance">
            <summary>
            Gets the OrchestrationInstance for this task context
            </summary>
        </member>
        <member name="T:DurableTask.Core.TaskHubClient">
            <summary>
                Client used to manage and query orchestration instances
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskHubClient.serviceClient">
            <summary>
            The orchestration service client for this task hub client
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.#ctor(DurableTask.Core.IOrchestrationServiceClient)">
            <summary>
                Create a new TaskHubClient with the given OrchestrationServiceClient
            </summary>
            <param name="serviceClient">Object implementing the <see cref="T:DurableTask.Core.IOrchestrationServiceClient"/> interface </param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceAsync(System.Type,System.Object)">
            <summary>
                Create a new orchestration of the specified type with an automatically generated instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceAsync(System.Type,System.String,System.Object)">
            <summary>
                Create a new orchestration of the specified type with the specified instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.Object)">
            <summary>
                Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the TaskOrchestration</param>
            <param name="version">Version of the TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.String,System.Object)">
            <summary>
                Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <param name="tags">Dictionary of key/value tags associated with this instance</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.Type,System.Object,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="orchestrationInput">Input parameter to the specified TaskOrchestration</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.Type,System.String,System.Object,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="orchestrationInput">Input parameter to the specified TaskOrchestration</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.String,System.String,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationName">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="orchestrationVersion">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationName">Name of the TaskOrchestration</param>
            <param name="orchestrationVersion">Version of the TaskOrchestration</param>
            <param name="orchestrationInput">Input parameter to the specified TaskOrchestration</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.String,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationName">Name of the TaskOrchestration</param>
            <param name="orchestrationVersion">Version of the TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="orchestrationInput">Input parameter to the specified TaskOrchestration</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationName">Name of the TaskOrchestration</param>
            <param name="orchestrationVersion">Version of the TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="orchestrationInput">Input parameter to the specified TaskOrchestration</param>
            <param name="orchestrationTags">Dictionary of key/value tags associated with this instance</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
                Creates an orchestration instance, and raises an event for it, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationName">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="orchestrationVersion">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.RaiseEventAsync(DurableTask.Core.OrchestrationInstance,System.String,System.Object)">
            <summary>
                Raises an event in the specified orchestration instance, which eventually causes the OnEvent() method in the
                orchestration to fire.
            </summary>
            <param name="orchestrationInstance">Instance in which to raise the event</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.TerminateInstanceAsync(DurableTask.Core.OrchestrationInstance)">
            <summary>
                Forcefully terminate the specified orchestration instance
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.TerminateInstanceAsync(DurableTask.Core.OrchestrationInstance,System.String)">
            <summary>
                Forcefully terminate the specified orchestration instance with a reason
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
            <param name="reason">Reason for terminating the instance</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.WaitForOrchestrationAsync(DurableTask.Core.OrchestrationInstance,System.TimeSpan)">
            <summary>
                Wait for an orchestration to reach any terminal state within the given timeout
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
            <param name="timeout">Max timeout to wait</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.WaitForOrchestrationAsync(DurableTask.Core.OrchestrationInstance,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Wait for an orchestration to reach any terminal state within the given timeout
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
            <param name="timeout">Max timeout to wait</param>
            <param name="cancellationToken">Task cancellation token</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.GetOrchestrationStateAsync(System.String)">
            <summary>
                Get a list of orchestration states from the instance storage table for the
                most current execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.GetOrchestrationStateAsync(System.String,System.Boolean)">
            <summary>
                Get a list of orchestration states from the instance storage table for either the most current
                or all executions (generations) of the specified instance.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="allExecutions">
                True if method should fetch all executions of the instance,
                false if the method should only fetch the most recent execution
            </param>
            <returns>
                List of OrchestrationState objects that represents the list of
                orchestrations in the instance store
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.GetOrchestrationStateAsync(DurableTask.Core.OrchestrationInstance)">
            <summary>
                Get a list of orchestration states from the instance storage table for the
                most current execution (generation) of the specified instance.
            </summary>
            <param name="instance">Instance</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.GetOrchestrationStateAsync(System.String,System.String)">
            <summary>
                Get a list of orchestration states from the instance storage table for the
                specified execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="executionId">Exectuion id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.GetOrchestrationHistoryAsync(DurableTask.Core.OrchestrationInstance)">
            <summary>
                Get a string dump of the execution history of the specified orchestration instance
                specified execution (generation) of the specified instance.
            </summary>
            <param name="instance">Instance</param>
            <returns>String with formatted JSON representing the execution history</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="M:DurableTask.Core.TaskHubClient.PurgeOrchestrationInstanceHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
                Purges orchestration instance state and history for orchestrations older than the specified threshold time.
            </summary>
            <param name="thresholdDateTimeUtc">Threshold date time in UTC</param>
            <param name="timeRangeFilterType">What to compare the threshold date time against</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if instance store not configured</exception>
        </member>
        <member name="T:DurableTask.Core.TaskHubWorker">
            <summary>
                Allows users to load the TaskOrchestration and TaskActivity classes and start
                dispatching to these. Also allows CRUD operations on the Task Hub itself.
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskHubWorker.orchestrationService">
            <summary>
            Reference to the orchestration service used by the task hub worker
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.#ctor(DurableTask.Core.IOrchestrationService)">
            <summary>
                Create a new TaskHubWorker with given OrchestrationService
            </summary>
            <param name="orchestrationService">Reference the orchestration service implmentaion</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.#ctor(DurableTask.Core.IOrchestrationService,DurableTask.Core.INameVersionObjectManager{DurableTask.Core.TaskOrchestration},DurableTask.Core.INameVersionObjectManager{DurableTask.Core.TaskActivity})">
            <summary>
                Create a new TaskHubWorker with given OrchestrationService and name version managers
            </summary>
            <param name="orchestrationService">Reference the orchestration service implmentaion</param>
            <param name="orchestrationObjectManager">NameVersionObjectManager for Orchestrations</param>
            <param name="activityObjectManager">NameVersionObjectManager for Activities</param>
        </member>
        <member name="P:DurableTask.Core.TaskHubWorker.TaskOrchestrationDispatcher">
            <summary>
            Gets the orchestration dispatcher
            </summary>
        </member>
        <member name="P:DurableTask.Core.TaskHubWorker.TaskActivityDispatcher">
            <summary>
            Gets the task activity dispatcher
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddOrchestrationDispatcherMiddleware(System.Func{DurableTask.Core.Middleware.DispatchMiddlewareContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
            Adds a middleware delegate to the orchestration dispatch pipeline.
            </summary>
            <param name="middleware">Delegate to invoke whenever a message is dispatched to an orchestration.</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddActivityDispatcherMiddleware(System.Func{DurableTask.Core.Middleware.DispatchMiddlewareContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
            Adds a middleware delegate to the activity dispatch pipeline.
            </summary>
            <param name="middleware">Delegate to invoke whenever a message is dispatched to an activity.</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.StartAsync">
            <summary>
                Starts the TaskHubWorker so it begins processing orchestrations and activities
            </summary>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.StopAsync">
            <summary>
                Gracefully stops the TaskHubWorker
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.StopAsync(System.Boolean)">
            <summary>
                Stops the TaskHubWorker
            </summary>
            <param name="isForced">True if forced shutdown, false if graceful shutdown</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskOrchestrations(System.Type[])">
            <summary>
                Loads user defined TaskOrchestration classes in the TaskHubWorker
            </summary>
            <param name="taskOrchestrationTypes">Types deriving from TaskOrchestration class</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskOrchestrations(DurableTask.Core.ObjectCreator{DurableTask.Core.TaskOrchestration}[])">
            <summary>
                Loads user defined TaskOrchestration classes in the TaskHubWorker
            </summary>
            <param name="taskOrchestrationCreators">
                User specified ObjectCreators that will
                create classes deriving TaskOrchestrations with specific names and versions
            </param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskActivities(DurableTask.Core.TaskActivity[])">
            <summary>
                Loads user defined TaskActivity objects in the TaskHubWorker
            </summary>
            <param name="taskActivityObjects">Objects of with TaskActivity base type</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskActivities(System.Type[])">
            <summary>
                Loads user defined TaskActivity classes in the TaskHubWorker
            </summary>
            <param name="taskActivityTypes">Types deriving from TaskOrchestration class</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskActivities(DurableTask.Core.ObjectCreator{DurableTask.Core.TaskActivity}[])">
            <summary>
                Loads user defined TaskActivity classes in the TaskHubWorker
            </summary>
            <param name="taskActivityCreators">
                User specified ObjectCreators that will
                create classes deriving TaskActivity with specific names and versions
            </param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskActivitiesFromInterface``1(``0)">
            <summary>
                Infers and adds every method in the specified interface T on the
                passed in object as a different TaskActivity with Name set to the method name
                and version set to an empty string. Methods can then be invoked from task orchestrations
                by calling ScheduleTask(name, version) with name as the method name and string.Empty as the version.
            </summary>
            <typeparam name="T">Interface</typeparam>
            <param name="activities">Object that implements this interface</param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.AddTaskActivitiesFromInterface``1(``0,System.Boolean)">
            <summary>
                Infers and adds every method in the specified interface T on the
                passed in object as a different TaskActivity with Name set to the method name
                and version set to an empty string. Methods can then be invoked from task orchestrations
                by calling ScheduleTask(name, version) with name as the method name and string.Empty as the version.
            </summary>
            <typeparam name="T">Interface</typeparam>
            <param name="activities">Object that implements this interface</param>
            <param name="useFullyQualifiedMethodNames">
                If true, the method name translation from the interface contains
                the interface name, if false then only the method name is used
            </param>
        </member>
        <member name="M:DurableTask.Core.TaskHubWorker.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DurableTask.Core.TaskMessage">
            <summary>
            Wire level transport object for task messages containing events and orchestration instance information
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskMessage.Event">
            <summary>
            Even information for this taks message
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskMessage.SequenceNumber">
            <summary>
            Sequence number for ordering of messages in history tracking
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskMessage.OrchestrationInstance">
            <summary>
            The orchestration instance information
            </summary>
        </member>
        <member name="P:DurableTask.Core.TaskMessage.ExtensionData">
            <summary>
            Implementation for <see cref="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData"/>.
            </summary>
        </member>
        <member name="T:DurableTask.Core.TaskOrchestration">
            <summary>
            Base class for TaskOrchestration
                User activity should almost always derive from either 
                TaskOrchestration&lt;TResult, TInput&gt; or 
                TaskOrchestration&lt;TResult, TInput, TEvent, TStatus&gt;
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration.Execute(DurableTask.Core.OrchestrationContext,System.String)">
            <summary>
            Abstract method for executing an orchestration based on the context and serialized input
            </summary>
            <param name="context">The orchestration context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration.RaiseEvent(DurableTask.Core.OrchestrationContext,System.String,System.String)">
            <summary>
            Abstract method for raising an event in the orchestration
            </summary>
            <param name="context">The orchestration context</param>
            <param name="name">Name for this event to be passed to the onevent handler</param>
            <param name="input">The serialized input</param>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration.GetStatus">
            <summary>
            Gets the current status of the orchestration
            </summary>
            <returns>The status</returns>
        </member>
        <member name="T:DurableTask.Core.TaskOrchestration`2">
            <summary>
            Typed base class for task orchestration
            </summary>
            <typeparam name="TResult">Output type of the orchestration</typeparam>
            <typeparam name="TInput">Input type for the orchestration</typeparam>
        </member>
        <member name="T:DurableTask.Core.TaskOrchestration`4">
            <summary>
            Typed base class for Task orchestration with typed events and status
            </summary>
            <typeparam name="TResult">Output type of the orchestration</typeparam>
            <typeparam name="TInput">Input type for the orchestration</typeparam>
            <typeparam name="TEvent">Input type for RaiseEvent calls</typeparam>
            <typeparam name="TStatus">Output Type for GetStatus calls</typeparam>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.#ctor">
            <summary>
            Creates a new TaskOrchestration with the default dataconverter
            </summary>
        </member>
        <member name="P:DurableTask.Core.TaskOrchestration`4.DataConverter">
            <summary>
            The dataconverter to use for input and output serialization/deserialization
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.Execute(DurableTask.Core.OrchestrationContext,System.String)">
            <summary>
            Method for executing an orchestration based on the context and serialized input
            </summary>
            <param name="context">The orchestration context</param>
            <param name="input">The serialized input</param>
            <returns>Serialized output from the execution</returns>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.RaiseEvent(DurableTask.Core.OrchestrationContext,System.String,System.String)">
            <summary>
            Method for raising an event in the orchestration
            </summary>
            <param name="context">The orchestration context</param>
            <param name="name">Name for this event to be passed to the onevent handler</param>
            <param name="input">The serialized input</param>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.GetStatus">
            <summary>
            Gets the current status of the orchestration
            </summary>
            <returns>The string status</returns>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.RunTask(DurableTask.Core.OrchestrationContext,`1)">
            <summary>
            Method for executing the orchestration with context and typed input
            </summary>
            <param name="context">The orchestraion context</param>
            <param name="input">The typed input</param>
            <returns>The typed output</returns>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.OnEvent(DurableTask.Core.OrchestrationContext,System.String,`2)">
            <summary>
            Virtual method for processing an event with given context, name and typed input
            </summary>
            <param name="context">The orchestraion context</param>
            <param name="name">Name for this event</param>
            <param name="input">Typed input</param>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestration`4.OnGetStatus">
            <summary>
            Method for getting typed status of the orchestration
            </summary>
            <returns>The typed status</returns>
        </member>
        <member name="T:DurableTask.Core.TaskOrchestrationDispatcher">
            <summary>
            Dispatcher for orchestrations to handle processing and renewing, completetion of orchestration events
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestrationDispatcher.StartAsync">
            <summary>
            Starts the dispatcher to start getting and processing orchestration events
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestrationDispatcher.StopAsync(System.Boolean)">
            <summary>
            Stops the dispatcher to stop getting and processing orchestration events
            </summary>
            <param name="forced">Flag indicating whether to stop gracefully or immediately</param>
        </member>
        <member name="P:DurableTask.Core.TaskOrchestrationDispatcher.IncludeDetails">
            <summary>
            Gets or sets flag whether to include additional details in error messages
            </summary>
        </member>
        <member name="P:DurableTask.Core.TaskOrchestrationDispatcher.IncludeParameters">
            <summary>
            Gets or sets flag whether to pass orchestration input parameters to sub orchestations
            </summary>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestrationDispatcher.OnFetchWorkItemAsync(System.TimeSpan)">
            <summary>
            Method to get the next work item to process within supplied timeout
            </summary>
            <param name="receiveTimeout">The max timeout to wait</param>
            <returns>A new TaskOrchestrationWorkItem</returns>
        </member>
        <member name="M:DurableTask.Core.TaskOrchestrationDispatcher.OnProcessWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <summary>
            Method to process a new work item
            </summary>
            <param name="workItem">The work item to process</param>
        </member>
        <member name="T:DurableTask.Core.TaskOrchestrationWorkItem">
            <summary>
            An active instance / work item of an orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskOrchestrationWorkItem.InstanceId">
            <summary>
            The instance id of this orchestration
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskOrchestrationWorkItem.OrchestrationRuntimeState">
            <summary>
            The current runtimestate of this work item
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskOrchestrationWorkItem.LockedUntilUtc">
            <summary>
            The datetime this orchestraion work item is locked until
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskOrchestrationWorkItem.NewMessages">
            <summary>
            The list of new task messages associated with this work item instance
            </summary>
        </member>
        <member name="F:DurableTask.Core.TaskOrchestrationWorkItem.Session">
            <summary>
            The session provider for this work item. This is only required for
            providers that intend to leverage extended sessions.
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracing.DefaultEventSource">
            <summary>
                Default event source for all DurableTask tracing
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracing.DefaultEventSource.Keywords">
            <summary>
                EventKeywords for the event source
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracing.DefaultEventSource.Keywords.Diagnostics">
            <summary>
            Diagnostic keyword
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracing.DefaultEventSource.Log">
            <summary>
            Gets the static instance of the DefaultEventSource
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.#ctor">
            <summary>
                Creates a new instance of the DefaultEventSource
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsTraceEnabled">
            <summary>
            Gets whether trace logs are enabled
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsDebugEnabled">
            <summary>
            Gets whether debug logs are enabled
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsInfoEnabled">
            <summary>
            Gets whether informational logs are enabled
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsWarningEnabled">
            <summary>
            Gets whether warning logs are enabled
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsErrorEnabled">
            <summary>
            Gets whether error logs are enabled
            </summary>
        </member>
        <member name="P:DurableTask.Core.Tracing.DefaultEventSource.IsCriticalEnabled">
            <summary>
            Gets whether critical logs are enabled
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Trace an event for the supplied eventtype and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Trace an event for the supplied eventtype, exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Trace(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Trace an event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Trace(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Trace an event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Trace(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Trace an event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Debug(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log debug event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Debug(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Log debug event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Debug(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log debug event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Info(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log informational event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Info(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Log informational event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Info(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log informational event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Warning(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log warning event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Warning(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Log warning event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Warning(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log warning event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Error(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log error event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Error(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Log error event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Error(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log error event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Critical(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log critical event for the supplied parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Critical(System.String,System.String,System.String,System.String,System.String,System.Exception,System.String)">
            <summary>
            Log critical event for the supplied exception and parameters
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.DefaultEventSource.Critical(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log critical event for the supplied parameters
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracing.TraceHelper">
            <summary>
                Helper class for logging/tracing
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.Trace(System.Diagnostics.TraceEventType,System.String,System.Func{System.String})">
            <summary>
                Simple trace with no iid or eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.Trace(System.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>
                Simple trace with no iid or eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceSession(System.Diagnostics.TraceEventType,System.String,System.String,System.Func{System.String})">
            <summary>
                Trace with iid but no eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceSession(System.Diagnostics.TraceEventType,System.String,System.String,System.String,System.Object[])">
            <summary>
                Trace with iid but no eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceInstance(System.Diagnostics.TraceEventType,System.String,DurableTask.Core.OrchestrationInstance,System.String,System.Object[])">
            <summary>
                Trace with iid and eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceInstance(System.Diagnostics.TraceEventType,System.String,DurableTask.Core.OrchestrationInstance,System.Func{System.String})">
            <summary>
                Trace with iid and eid
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)">
            <summary>
                Trace an exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception,System.Func{System.String})">
            <summary>
                Trace an exception and message
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception,System.String,System.Object[])">
            <summary>
                Trace an exception and message
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionInstance(System.Diagnostics.TraceEventType,System.String,DurableTask.Core.OrchestrationInstance,System.Exception)">
            <summary>
                Trace an instance exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionInstance(System.Diagnostics.TraceEventType,System.String,DurableTask.Core.OrchestrationInstance,System.Exception,System.Func{System.String})">
            <summary>
                Trace an instance exception and message
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionInstance(System.Diagnostics.TraceEventType,System.String,DurableTask.Core.OrchestrationInstance,System.Exception,System.String,System.Object[])">
            <summary>
                Trace an instance exception and message
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionSession(System.Diagnostics.TraceEventType,System.String,System.String,System.Exception)">
            <summary>
                Trace a session exception without execution id
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionSession(System.Diagnostics.TraceEventType,System.String,System.String,System.Exception,System.Func{System.String})">
            <summary>
                Trace a session exception and message without execution id
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracing.TraceHelper.TraceExceptionSession(System.Diagnostics.TraceEventType,System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
                Trace a session exception and message without execution id
            </summary>
        </member>
        <member name="T:DurableTask.Core.TrackingWorkItem">
            <summary>
            An active tracking work item
            </summary>
        </member>
        <member name="F:DurableTask.Core.TrackingWorkItem.InstanceId">
            <summary>
            The instance id of this tracking work item
            </summary>
        </member>
        <member name="F:DurableTask.Core.TrackingWorkItem.LockedUntilUtc">
            <summary>
            The datetime this work item is locked until
            </summary>
        </member>
        <member name="F:DurableTask.Core.TrackingWorkItem.NewMessages">
            <summary>
            The list of new messages to process tracking for
            </summary>
        </member>
        <member name="F:DurableTask.Core.TrackingWorkItem.SessionInstance">
            <summary>
            The session instance this tracking item is associated with
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracking.InstanceEntityBase">
            <summary>
            Base class for history tracking events
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.InstanceEntityBase.SequenceNumber">
            <summary>
            Sequence number for ordering of messages in history tracking
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore">
            <summary>
            Interface to allow save and load large blobs, such as message and session, as a stream using a storage store.
            The blob is saved in the store using an access key (e.g., a path to the blob),
            which can be used to uniquely load the blob back.
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.BuildMessageBlobKey(DurableTask.Core.OrchestrationInstance,System.DateTime)">
            <summary>
            Create a blob storage access key based on the orchestrationInstance.
            This key will be used to save and load the stream message in external storage when it is too large.
            </summary>
            <param name="orchestrationInstance">The orchestration instance.</param>
            <param name="messageFireTime">The message fire time. Could be DateTime.MinValue.</param>
            <returns>A message blob key.</returns>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.BuildSessionBlobKey(System.String)">
            <summary>
            Create a blob storage access key based on message session.
            This key will be used to save and load the stream in external storage when it is too large.
            </summary>
            <param name="sessionId">The message session Id.</param>
            <returns>A blob key.</returns>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.SaveStreamAsync(System.String,System.IO.Stream)">
            <summary>
            Save the stream of the message or seesion using key.
            </summary>
            <param name="blobKey">The blob key.</param>
            <param name="stream">The stream of the message or session.</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.LoadStreamAsync(System.String)">
            <summary>
            Load the stream of message or seesion from storage using key.
            </summary>
            <param name="blobKey">The blob key.</param>
            <returns>The saved stream message or session.</returns>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.DeleteStoreAsync">
            <summary>
            Deletes the blob store
            </summary>
        </member>
        <member name="M:DurableTask.Core.Tracking.IOrchestrationServiceBlobStore.PurgeExpiredBlobsAsync(System.DateTime)">
            <summary>
            Purges expired containers from storage for given time threshold
            </summary>
            <param name="thresholdDateTimeUtc">The datetime in UTC to use as the threshold for purging containers</param>
        </member>
        <member name="T:DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity">
            <summary>
            History Entity for Orchestration Jumpstart state
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity.JumpStartTime">
            <summary>
            The start time of the jump start event
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity.State">
            <summary>
            Orchestration state of the jump start instance
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracking.OrchestrationStateInstanceEntity">
            <summary>
            History Entity for Orchestration State
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationStateInstanceEntity.State">
            <summary>
            The Orchestraion state for this Instance Entity
            </summary>
        </member>
        <member name="T:DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity">
            <summary>
            History Entity for a Work Item Instance
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity.InstanceId">
            <summary>
            The orchestration Instance Id
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity.ExecutionId">
            <summary>
            The orchestration Execution Id
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity.EventTimestamp">
            <summary>
            Timestamp of the instance event
            </summary>
        </member>
        <member name="F:DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity.HistoryEvent">
            <summary>
            History event corresponding to this work item instance entity
            </summary>
        </member>
        <member name="T:DurableTask.Core.WorkItemDispatcher`1">
            <summary>
            Dispatcher class for fetching and processing work items of the supplied type
            </summary>
            <typeparam name="T">The typed Object to dispatch</typeparam>
        </member>
        <member name="P:DurableTask.Core.WorkItemDispatcher`1.MaxConcurrentWorkItems">
            <summary>
            Gets or sets the maximum concurrent work items
            </summary>
        </member>
        <member name="P:DurableTask.Core.WorkItemDispatcher`1.DispatcherCount">
            <summary>
            Gets or sets the number of dispatchers to create
            </summary>
        </member>
        <member name="F:DurableTask.Core.WorkItemDispatcher`1.SafeReleaseWorkItem">
            <summary>
            Method to execute for safely releasing a work item
            </summary>
        </member>
        <member name="F:DurableTask.Core.WorkItemDispatcher`1.AbortWorkItem">
            <summary>
            Method to execute for aborting a work item
            </summary>
        </member>
        <member name="F:DurableTask.Core.WorkItemDispatcher`1.GetDelayInSecondsAfterOnFetchException">
            <summary>
            Method to get a delay to wait after a fetch exception
            </summary>
        </member>
        <member name="F:DurableTask.Core.WorkItemDispatcher`1.GetDelayInSecondsAfterOnProcessException">
            <summary>
            Method to get a delay to wait after a process exception
            </summary>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.#ctor(System.String,System.Func{`0,System.String},System.Func{System.TimeSpan,System.Threading.Tasks.Task{`0}},System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new Work Item Dispatcher with givne name and identifier method
            </summary>
            <param name="name">Name identifying this dispatcher for logging and diagnostics</param>
            <param name="workItemIdentifier"></param>
            <param name="fetchWorkItem"></param>
            <param name="processWorkItem"></param>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.StartAsync">
            <summary>
            Starts the workitem dispatcher
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception if dispatcher has already been started</exception>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.StopAsync(System.Boolean)">
            <summary>
            Stops the work item dispatcher with optional forced flag
            </summary>
            <param name="forced">Flag indicating whether to stop gracefully and wait for work item completion or just stop immediately</param>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.GetFormattedLog(System.String,System.String)">
            <summary>
            Method for formatting log messages to include dispatcher name and id information
            </summary>
            <param name="dispatcherId">Id of the dispatcher</param>
            <param name="message">The message to format</param>
            <returns>The formatted message</returns>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcher`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DurableTask.Core.WorkItemDispatcherContext">
            <summary>
            Class to hold context for a WorkItemDispatcher call
            </summary>
        </member>
        <member name="M:DurableTask.Core.WorkItemDispatcherContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the WorkItemDispatcherContext class
            </summary>
            <param name="name">The context name</param>
            <param name="id">The context id</param>
            <param name="dispatcherId">The context dispatcher id</param>
        </member>
        <member name="P:DurableTask.Core.WorkItemDispatcherContext.Name">
            <summary>
            Gets the name from the context
            </summary>
        </member>
        <member name="P:DurableTask.Core.WorkItemDispatcherContext.Id">
            <summary>
            Gets the id from the context
            </summary>
        </member>
        <member name="P:DurableTask.Core.WorkItemDispatcherContext.DispatcherId">
            <summary>
            Gets the dispatcher id from the context
            </summary>
        </member>
    </members>
</doc>
